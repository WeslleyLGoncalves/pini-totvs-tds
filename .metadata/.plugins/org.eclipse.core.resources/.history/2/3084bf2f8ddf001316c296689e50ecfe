#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³M41LIOK   º Autor ³ Douglas Silva      º Data ³  09/04/2014 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Este programa tem como não deixar duplicar itens no pedido º±±
±±º          ³ de venda                                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Especifico Editora Pini                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

User Function M410LIOK()       

Private cAliaAnte, nAreaAnte,nRegiAnte, nTES, _TES, nTIPBON, _TIPBON, cTexto, nNotaOrig, _NotaOrig, nSerieOrig, _SerieOrig, nPosTes
Private nCodPro, _CodPro, nItemOri, _ItemOri
Private nPosProduto, nPosPerDesc, nPosPrUnit, nPosPrcVen, nPosBlDesc, nPosPrUnit2, nTipoBonif
Private nRetorno := .T.  
Private nSaldo := 0

//Não entra no ponto de entrada caso seja Faturamento Notas Serie 21

cAliaAnte := Alias()                                   
nAreaAnte := IndexOrd()
nRegiAnte := RecNo()
                                                                                 
nPosItem		:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_ITEM" 		})
nPosProduto 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_PRODUTO" 	})
nPosPerDesc 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_PERDESC" 	})
nPosPrUnit 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_PRUNIT" 	})
nPosQuant 		:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_QTDVEN"	})
nPosPrcVen 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_PRCVEN" 	})
nPosBlDesc 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_BLDESC" 	})
nPosPrUnit2 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_PRUNIT2" 	})
nTipoBonif 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_TIPOBON" 	})
nTipoLocal 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_LOCAL" 	})
nPosTes	 	:= aScan(aHeader,{|COLUNA| AllTrim(Upper(COLUNA[2]))	==	"C6_TES"	 	})

If ACOLS[N,LEN(ACOLS[N])] // Entra se a linha estiver apagada

     nRetorno := .T.
     dbSelectArea(cAliaAnte)
     dbSetOrder(nAreaAnte)
     dbGoTo(nRegiAnte)
     Return(nRetorno)   
     
EndIf

cCodigoP := aCols[n,nPosProduto]
nSaldo := U_CONSSLDO(cCodigoP,aCols[n,nTipoLocal], aCols[n,nPosTes] )             

SB1->(DBSELECTAREA("SB1"))
SB1->(DBSETORDER(1))
SB1->(DBSEEK(xFilial("SB1") + ALLTRIM(aCols[n,nPosProduto]) ))

If ! ALLTRIM(M->C5_TIPOOP) $ "500|30" .And. SB1->B1_GRUPO $ "0100|0300|4000|3610|0804" 
	//Validação para não deixar item duplicado.
	For  nX := 1 To len(aCols)
		If ! ACOLS[N,LEN(ACOLS[N])] .And. aCols[n,nTipoLocal] == "T5" .or. aCols[n,nTipoLocal] == "T6"
			If nX != n .And. cCodigoP == aCols[nX,nPosProduto] .And. ! ACOLS[nX,LEN(ACOLS[nX])]  
				Alert("ATENÇÃO: Não é possivel digitar dois itens com o mesmo código, favor somar com o item: " +  aCols[nX,nPosItem] ,"M410LIOK") 
				nRetorno := .F.         
	        Endif
	    Endif           
	Next nX
           
	//Valida quantidade em Estoque
	If ! ACOLS[N,LEN(ACOLS[N])] .And. aCols[n,nTipoLocal] == "T5" .or. aCols[n,nTipoLocal] == "T6"
		If  nSaldo < aCols[n,nPosQuant] .And. ! ACOLS[n,LEN(ACOLS[n])]  
			Alert("ATENÇÃO: Produto: " + ALLTRIM(cCodigoP) + " Não contem saldo suficiente para atender este pedido, Saldo: " + cValToChar(nSaldo) ,"M410LIOK") 
			nRetorno := .F.         
        Endif
    Endif           
EndIf
dbSelectArea(cAliaAnte)
dbSetOrder(nAreaAnte)
dbGoTo(nRegiAnte)  

Return(nRetorno)                              

User Function CONSSLDO(_cCodigo,_cLocal, _cTes) 

Private nSaldo := 0

cQuery := " SELECT (B2_QATU - B2_RESERVA) AS B2_QATU FROM "+RETSQLNAME("SB2")+" SB2 " 
cQuery += " WHERE SB2.D_E_L_E_T_ != '*' AND SB2.B2_LOCAL = '"+_cLocal+"' AND SB2.B2_COD = '"+_cCodigo+"' "

dbUseArea(.T., "TOPCONN", TCGenQry(, , cQuery), "TRB", .F., .T.)


cQuery := " SELECT F4_ESTOQUE FROM SF4010 WHERE D_E_L_E_T_ != '*' AND F4_CODIGO = '"+_cTes+"' "

dbUseArea(.T., "TOPCONN", TCGenQry(, , cQuery), "TRD", .F., .T.)


	If TRD->F4_ESTOQUE == "S"
		nSaldo := TRB->B2_QATU
	Else
		nSaldo := 999999
	EndIf 

TRB->(DBCLOSEAREA("TRB"))
TRD->(DBCLOSEAREA("TRD"))

Return(nSaldo)